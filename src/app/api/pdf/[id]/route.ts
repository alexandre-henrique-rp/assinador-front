// import { NextResponse } from "next/server";
// import Manifesto from "./functions/manifesto";
// import RequestPdf from "./functions/pdfRequest";

// export async function GET(
//     request: Request,
//     { params }: { params: { id: string } }
// ) {
//     try {
//         const ID: string = params.id;

//         const requestUUid = await fetch(
//             `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/docs?filters[uuid][$eq]=${ID}&populate=%2A`,
//             {
//                 method: "GET",
//                 headers: {
//                     Authorization: `Bearer ${process.env.NEXT_PUBLIC_STRAPI_API_TOKEN}`,
//                     "Content-Type": "application/json",
//                 },
//                 cache: "no-store",
//             }
//         );

//         const retornoUuid = await requestUUid.json();
//         const [dados] = await retornoUuid.data;
//         const Assinaturas = dados.attributes.assinaturas;
//         const docId = dados.attributes.doc.data.id;
//         const filename = dados.attributes.nome;

//         console.log(!!Assinaturas);

//         if (!!Assinaturas) {
//             const requestManifesto = await Manifesto(Assinaturas, ID, filename);
//             const requestPdf = await RequestPdf(docId);

//             // Concatena os dados bin√°rios dos arquivos PDF
//             const pdfBuffer = Buffer.concat([requestManifesto, requestPdf]);

//             const sanitizeFilename = (filename: string): string => {
//                 const map: { [key: string]: string } = {
//                     √ß: "c",
//                     √á: "C",
//                     √©: "e",
//                     √â: "E",
//                     √®: "e",
//                     √à: "E",
//                     √™: "e",
//                     √ä: "E",
//                     √´: "e",
//                     √ã: "E",
//                     √°: "a",
//                     √Å: "A",
//                     √†: "a",
//                     √Ä: "A",
//                     √£: "a",
//                     √É: "A",
//                     √¢: "a",
//                     √Ç: "A",
//                     √§: "a",
//                     √Ñ: "A",
//                     √≠: "i",
//                     √ç: "I",
//                     √¨: "i",
//                     √å: "I",
//                     √Æ: "i",
//                     √é: "I",
//                     √Ø: "i",
//                     √è: "I",
//                     √≥: "o",
//                     √ì: "O",
//                     √≤: "o",
//                     √í: "O",
//                     √µ: "o",
//                     √ï: "O",
//                     √¥: "o",
//                     √î: "O",
//                     √∂: "o",
//                     √ñ: "O",
//                     √∫: "u",
//                     √ö: "U",
//                     √π: "u",
//                     √ô: "U",
//                     √ª: "u",
//                     √õ: "U",
//                     √º: "u",
//                     √ú: "U",
//                     √±: "n",
//                     √ë: "N",
//                 };
//                 return filename.replace(
//                     /[\u00C0-\u024F]/g,
//                     (char) => map[char] || char
//                 );
//             };
    
//             // Sanitiza o nome do arquivo
//             const sanitizedFileName = sanitizeFilename(filename);
    
//             // Retorna o PDF como resposta
//             return new NextResponse(pdfBuffer, {
//                 status: 200,
//                 headers: {
//                     "Content-Type": "application/pdf",
//                     "Content-Disposition": `attachment; filename="${sanitizedFileName}"`,
//                 },
//             });
//         } else {
//             const requestPdf = await RequestPdf(docId);

//             console.log("filename",filename)
//             // Concatena os dados bin√°rios dos arquivos PDF
//             const pdfBuffer = requestPdf;

//             const sanitizeFilename = (filename: string): string => {
//                 const map: { [key: string]: string } = {
//                     √ß: "c",
//                     √á: "C",
//                     √©: "e",
//                     √â: "E",
//                     √®: "e",
//                     √à: "E",
//                     √™: "e",
//                     √ä: "E",
//                     √´: "e",
//                     √ã: "E",
//                     √°: "a",
//                     √Å: "A",
//                     √†: "a",
//                     √Ä: "A",
//                     √£: "a",
//                     √É: "A",
//                     √¢: "a",
//                     √Ç: "A",
//                     √§: "a",
//                     √Ñ: "A",
//                     √≠: "i",
//                     √ç: "I",
//                     √¨: "i",
//                     √å: "I",
//                     √Æ: "i",
//                     √é: "I",
//                     √Ø: "i",
//                     √è: "I",
//                     √≥: "o",
//                     √ì: "O",
//                     √≤: "o",
//                     √í: "O",
//                     √µ: "o",
//                     √ï: "O",
//                     √¥: "o",
//                     √î: "O",
//                     √∂: "o",
//                     √ñ: "O",
//                     √∫: "u",
//                     √ö: "U",
//                     √π: "u",
//                     √ô: "U",
//                     √ª: "u",
//                     √õ: "U",
//                     √º: "u",
//                     √ú: "U",
//                     √±: "n",
//                     √ë: "N",
//                 };
//                 return filename.replace(
//                     /[\u00C0-\u024F]/g,
//                     (char) => map[char] || char
//                 );
//             };
    
//             // Sanitiza o nome do arquivo
//             const sanitizedFileName = sanitizeFilename(filename);
    
//             // Retorna o PDF como resposta
//             return new NextResponse(pdfBuffer, {
//                 status: 200,
//                 headers: {
//                     "Content-Type": "application/pdf",
//                     "Content-Disposition": `attachment; filename="${sanitizedFileName}"`,
//                 },
//             });
//         }
        
//     } catch (error) {
//         console.error("Erro ao obter o PDF:", error);
//         return new NextResponse("Erro ao obter o PDF", { status: 500 });
//     }
// }

import { NextResponse } from "next/server";
import Manifesto from "./functions/manifesto";
import RequestPdf from "./functions/pdfRequest";

export async function GET(
    request: Request,
    { params }: { params: { id: string } }
) {
    try {
        const ID: string = params.id;

        const requestUUid = await fetch(
            `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/docs?filters[uuid][$eq]=${ID}&populate=%2A`,
            {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${process.env.NEXT_PUBLIC_STRAPI_API_TOKEN}`,
                    "Content-Type": "application/json",
                },
                cache: "no-store",
            }
        );

        const retornoUuid = await requestUUid.json();
        
        const [dados] = await retornoUuid.data;
        const Assinaturas = dados.attributes.assinaturas.data;
        console.log("üöÄ ~ Assinaturas:", Assinaturas)
        const docId = dados.attributes.doc.data.id;
        const filename = dados.attributes.nome;

        let pdfBuffer;

        if (Assinaturas.length > 0) {
            const requestManifesto = await Manifesto(Assinaturas, ID, filename);
            const requestPdf = await RequestPdf(docId);

            // Concatena os dados bin√°rios dos arquivos PDF
            pdfBuffer = Buffer.concat([requestManifesto, requestPdf]);
        } else {
            pdfBuffer = await RequestPdf(docId);
        }

        // Converte o PDF para base64
        const pdfBase64 = pdfBuffer.toString('base64');

        // Retorna o PDF em base64
        return new NextResponse(JSON.stringify({
            base64: pdfBase64,
            filename: filename
        }), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });

    } catch (error) {
        console.error("Erro ao obter o PDF:", error);
        return new NextResponse("Erro ao obter o PDF", { status: 500 });
    }
}